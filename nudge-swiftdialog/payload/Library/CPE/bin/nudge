#!/usr/local/munki/munki-python

import datetime
import json
import os
import platform
import subprocess
import sys
import urllib.request
from time import sleep

sys.path.insert(0, "/usr/local/munki")
from CoreFoundation import (
    CFPreferencesCopyValue,
    CFPreferencesSetValue,
)
from Foundation import NSURL, NSLog, kCFPreferencesAnyHost
from munkilib.pkgutils import MunkiLooseVersion
from PyObjCTools import Conversion
from SystemConfiguration import SCDynamicStoreCopyConsoleUser

APP_DOMAIN = "com.company.itops.notifications"
CONFIG_FILE_URL = "https://cdn.itops.company.com/public/nudge/nudge-swiftdialog.json"
TODAY = datetime.date.today()
DIALOG_COMMAND_FILE = "/var/tmp/nudge-dialog.log"


class DialogAlert:
    def __init__(self, config):
        # set the default look of the alert
        self.config = config
        self.content_dict = {
            "alignment": "center",
            "bannerimage": f"{config['IMG_LOCATION']}/company-banner.png",
            "button1text": "Later",
            "button1disabled": "true",
            "commandfile": DIALOG_COMMAND_FILE,
            "helpmessage": config["HELP_MESSAGE"],
            "message": f" ",
            "messagefont": "size=16",
            "title": "none",
            "width": "700",
            "height": "300",
            "quitkey": "P",
            "infobuttontext": "Update Now",
            "infobuttonaction": "x-apple.systempreferences:com.apple.preferences.softwareupdate",
        }

    def alert(self, contentDict):
        """Runs the SwiftDialog app and returns the exit code"""
        jsonString = json.dumps(contentDict)
        exit_code = os.system(
            f"{self.config['DIALOG']} -o --jsonstring '{jsonString}' &"
        )
        sleep(0.1)
        return exit_code


def download_file(file_url):
    try:
        json_raw = urllib.request.urlopen(file_url).read()
    except Exception as err:
        # urllib can have some issues with certs
        try:
            cmd = ["/usr/bin/curl", "-s", file_url]
            json_raw = run_cmd(cmd)[0].decode("utf-8")
        except Exception as err:
            write_log("Unable to download configuration file.")
            return err
    return json_raw


def get_configuration(current_user):
    """
    Configuration can be loaded from the App Domain (via cfprefs)
    or by a remote json file.
    """
    config = {}
    global_profile_settings = (
        read_cfprefs_value("global", APP_DOMAIN, current_user) or {}
    )
    app_profile_settings = read_cfprefs_value("nudge", APP_DOMAIN, current_user) or {}
    config = config | Conversion.pythonCollectionFromPropertyList(
        global_profile_settings
    )
    config = config | Conversion.pythonCollectionFromPropertyList(app_profile_settings)

    config["CONFIG_FILE_URL"] = config.get("CONFIG_FILE_URL", CONFIG_FILE_URL)

    try:
        remote_file = json.loads(download_file(CONFIG_FILE_URL))
    except:
        remote_file = {}

    config["CUTOFF_DATE"] = config.get(
        "CUTOFF_DATE", remote_file.get("CUTOFF_DATE", "2023-05-20")
    )
    config["DELTA_DAYS"] = (
        datetime.datetime.strptime(config["CUTOFF_DATE"], "%Y-%m-%d").date() - TODAY
    ).days
    config["FILE_LOCATION"] = config.get("FILE_LOCATION", "/Library/CPE/")
    config["IMG_LOCATION"] = os.path.join(config["FILE_LOCATION"], "imgs")
    config["DIALOG"] = config.get("DIALOG", "/usr/local/bin/dialog")
    config["GRACE_PERIOD"] = config.get(
        "GRACE_PERIOD", remote_file.get("GRACE_PERIOD", 7)
    )
    config["INFO_LINK_TEXT"] = config.get(
        "INFO_LINK_TEXT",
        remote_file.get("INFO_LINK_TEXT", "Company Update Policy"),
    )
    config["INFO_LINK"] = config.get(
        "INFO_LINK",
        remote_file.get("INFO_LINK", "https://confluence.company.com/x/ElUNDQ"),
    )
    config["HELP_MESSAGE"] = config.get(
        "help_message",
        remote_file.get(
            "HELP_MESSAGE",
            (
                "Apple releases important updates for macOS on a regular basis.\n\n"
                "These updates often contain critical security fixes that will protect your device from compromise.\n\n"
                "For more information about our update policies, please see the\n\n"
                f"[{config['INFO_LINK_TEXT']}]({config['INFO_LINK']})"
            ),
        ),
    )
    config["OS_N"] = config.get("OS_N", remote_file.get("OS_N", "unknown"))

    if config["OS_N"] != "unknown":
        latest_os = config["OS_N"]
        os_vers = config["OS_N"]
        while os_vers >= latest_os - 2:
            config[f"REQUIRED_{os_vers}_OS"] = config.get(
                f"REQUIRED_{os_vers}_OS",
                remote_file.get(
                    f"REQUIRED_{os_vers}_OS",
                    config.get(f"REQUIRED_{latest_os}_OS", "unknown"),
                ),
            )
            os_vers = os_vers - 1

    config["TICKET_TEXT"] = config.get("TICKET_TEXT", "IT Support")
    config["TICKET_LINK"] = config.get("TICKET_LINK", "https://helpdesk.company.com")
    return config


def get_console_user(default_value=None):
    try:
        cfuser = SCDynamicStoreCopyConsoleUser(None, None, None)
        return cfuser
    except Exception as e:
        write_log(f"Error retrieving console user: {e}")
        return default_value


def get_os_version():
    """Return OS version."""
    return MunkiLooseVersion(platform.mac_ver()[0])


def get_required_os(current_os, config):
    # Get required version for this machine
    latest_os = config["OS_N"]
    if current_os < MunkiLooseVersion(str(latest_os - 1)):
        required_os = config[f"REQUIRED_{latest_os - 2}_OS"]
    elif current_os < MunkiLooseVersion(str(latest_os)):
        required_os = config[f"REQUIRED_{latest_os - 1}_OS"]
    else:
        required_os = config[f"REQUIRED_{latest_os}_OS"]
    return required_os


def is_app_running(app):
    """Tries to determine if the app is currently running"""
    output_dict = run_subp(["/usr/bin/pgrep", app])
    running = output_dict["stdout"].decode("ascii")
    if running:
        # It's running!
        return True
    # No evidence that app is running
    return False


def kickstart_softwareupdate(current_os, current_datetime, current_user):
    last_fixapplied = read_cfprefs_value(
        "nudgeLastFixAppliedDate", APP_DOMAIN, current_user
    )
    write_log(f"Last fix applied: {last_fixapplied}")
    if (
        last_fixapplied is None
        or last_fixapplied < current_datetime - datetime.timedelta(days=7)
    ):
        write_cfprefs_value(
            "nudgeLastFixAppliedDate", current_datetime, APP_DOMAIN, current_user
        )
        if current_os >= MunkiLooseVersion(13.0):
            write_log("Running Software Update List All.")
            cmd = ["/usr/sbin/softwareupdate", "--list", "--all"]
            output = run_subp(cmd)
        if current_os < MunkiLooseVersion(13.0):
            write_log("Restarting softwareupdated.")
            cmd = [
                "/bin/launchctl",
                "kickstart",
                "-k",
                "system/com.apple.softwareupdated",
            ]
            output = run_cmd(cmd)[0].decode("utf-8")
        write_log(output)
    return


def run_cmd(cmd):
    """Run the cmd and returns the output and error"""
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    if err:
        write_log(err.decode("utf-8"))
    return output, err


def run_subp(command, input=None):
    """
    Run a subprocess.
    Command must be an array of strings, allows optional input.
    Returns results in a dictionary.
    """
    # Validate that command is not a string
    if isinstance(command, str):
        # Not an array!
        raise TypeError("Command must be an array")

    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    (out, err) = proc.communicate(input)
    result_dict = {
        "stdout": out,
        "stderr": err,
        "status": proc.returncode,
        "success": True if proc.returncode == 0 else False,
    }
    return result_dict


def set_reminder_level(config):
    # One day left, alert every hour
    if config["DELTA_DAYS"] <= 1:
        return 1
    else:
        return config["DELTA_DAYS"]


def set_close_ability(config):
    if config["DELTA_DAYS"] > -1:
        return 0
    else:
        # return square of number of days since required
        delay = config["DELTA_DAYS"] * config["DELTA_DAYS"] + 10
        if delay < 300:
            return delay
        else:
            return 300


def update_dialog(command, value=""):
    """Updates the current dialog window"""
    with open(DIALOG_COMMAND_FILE, "w") as log:
        log.write(f"{command}: {value}\n")


def read_cfprefs_value(key, app_domain, current_user):
    """Returns a preference value for the specified key and application."""
    return CFPreferencesCopyValue(key, app_domain, current_user, kCFPreferencesAnyHost)


def write_cfprefs_value(key, value, app_domain, current_user):
    """Adds, modifies, or removes a preference value for the specified domain."""
    CFPreferencesSetValue(key, value, app_domain, current_user, kCFPreferencesAnyHost)


def write_log(text):
    """Logger for nudge. Output is controlled by the LaunchAgent."""
    NSLog("[nudge] " + text)


def exit_nudge(exit_code, message):
    write_log(f"############## {message} ##############")
    sys.exit(exit_code)


def main():
    current_user, _, _ = get_console_user()
    config = get_configuration(current_user)
    write_log("##################### Starting Nudge #####################")

    if config["OS_N"] == "unknown":
        write_log("Unable to determine the current required OS. Exiting.")
        exit_nudge(1, "Nudge Failed")

    if not os.path.exists(config["DIALOG"]):
        write_log("Dialog does not seem to be installed. Exiting.")
        exit_nudge(1, "Nudge Failed")

    if os.path.exists(DIALOG_COMMAND_FILE):
        os.remove(DIALOG_COMMAND_FILE)

    current_os = get_os_version()

    if current_os < MunkiLooseVersion("11"):
        write_log("Not compatible with Catalina and below, please upgrade.")
        exit_nudge(1, "Nudge Failed")

    required_os = get_required_os(current_os, config)

    if current_os >= MunkiLooseVersion(required_os):
        write_log(f"{current_os} is at the required version ({required_os})")
        exit_nudge(0, "Nudge Succeeded, No notification.")
    else:
        write_log(f"{current_os} is not at the required version ({required_os})")

    # Set grace period for new device
    initial_setup_date = datetime.datetime.fromtimestamp(
        os.stat("/private/var/db/.AppleSetupDone").st_birthtime
    )
    if (TODAY - initial_setup_date.date()).days < config["GRACE_PERIOD"]:
        write_log(f"Machine is in the grace period for new devices.")
        exit_nudge(0, "Nudge Succeeded, No notification.")

    # Set message frequency
    last_activation = read_cfprefs_value(
        "nudgeLastActivationDate", APP_DOMAIN, current_user
    )
    current_datetime = datetime.datetime.now()
    hour_delay = set_reminder_level(config)

    kickstart_softwareupdate(current_os, current_datetime, current_user)

    write_log(f"Last activated: {last_activation}")
    write_log(f"Hour delay: {hour_delay}")

    if last_activation and last_activation > current_datetime - datetime.timedelta(
        hours=hour_delay
    ):
        write_log("We have recently nudged the user.")
        exit_nudge(0, "Nudge Succeeded, No notification.")

    # Start notifications
    write_log("Starting User notification")
    write_cfprefs_value(
        "nudgeLastActivationDate", datetime.datetime.today(), APP_DOMAIN, current_user
    )

    step1 = DialogAlert(config)
    if config["DELTA_DAYS"] < 7:
        step1.content_dict["ontop"] = True
    close_delay = set_close_ability(config)
    if config["DELTA_DAYS"] < 0:
        config["DELTA_DAYS"] = 0
    step1.content_dict["message"] = (
        "## Your device requires a security update\n\n"
        f"Days Remaining to Update: **{config['DELTA_DAYS']}**\n\n"
        f"Your OS version: **{current_os}**   Required minimum version: **{required_os}**"
    )
    status = step1.alert(step1.content_dict)

    while close_delay > 0:
        write_log(f"Close delay: {str(close_delay)}")
        close_delay -= 1
        sleep(1)

    # Adding this here so that the command file has time to be created
    sleep(1)
    update_dialog("button1", "enable")
    write_log(str(status))
    # Adding loop so that it eventually quits and can pop back up for the user
    # This delay = 60 minutes
    i = 0
    while is_app_running("Dialog") and i < 360:
        write_log("Waiting for user to quit script.")
        sleep(10)
        i += 1
    if i == 360:
        write_log("User has ignored for one hour.")
    exit_nudge(0, "Nudge Succeeded, User ignored.")


if __name__ == "__main__":
    main()
